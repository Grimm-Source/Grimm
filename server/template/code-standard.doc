
File Header:
#
# File: template.doc
# Copyright: Grimm Project, Ren Pin NGO, all rights reserved.
# License: MIT
# ------------------------------------------------------------------------- #
# Authors:  Ming Li(adagio.ming@gmail.com)
#           Others...
#
# Description: server backend code template.
#
# To-Dos:
#   1. make other supplements if needed.
#   2. fix some whatever bugs.
#
# Issues:
#   No issue so far.
#
# Revision History (Date, Editor, Description):
#   1. 2019/08/12, Ming, create first revision.
#


Py Code Style Conventions:
    1. Space / Tab:         4 Spaces 
                            ('----')
    2. Class Names:         TemplateClassName, templateclassname 
                            (both forms are okay, but prefer the first one)
    3. Function Name:       template_func_name 
                            (only 1 form is allowed, use underscore to separate name words)
    4. Global Consts:       TEMPLATE_GLOBAL_CONSTS
                            (only 1 form is allowed, capitalized each word and use underscore to separate each word, put all global vars at the beginning of the code, right after the 'import' part, and before the declaration part)
    5. Global Non-consts:   template_global_non_consts
                            (follows 'Function Name' convention)
    5. Scope Vars:          template_scope_var_name
                            (follows 'Function Name' convention)
    6. File Names:          python_template_file.py
                            (follows 'Function Name' convention, but with filetype suffix)
    Others to be amended...


Name Form Conventions(Recommended):
    1. do_something:        a function or a procedure is designed to do a certain job, when naming this kind of functions/procedures, put the verb ahead of other words, like 'parse', then others behind, and then the job name at last.
                            example:
                                    parse_url_info
    2. is_something:        a function or a procedure is designed to check the bool status of some object, when naming this kind of functions/procedures, put 'is' ahead of other words, then ohters behind, and then expected status/value at last.
                            example:
                                    is_grimm_admin
    3. how_something:       a function or a procedure that describe a group of things, no other verbs or predicates are needed, but sometimes adjectives/adverbs are needed, in this case, put the adjectives/adverbs ahead of the group name.
                            example:
                                    beautiful_member
    Others to be amended...


Comment Norm:
    1. comment line starting with "#" is for developers to put note, like adding necessary feature or amend existent job in the feature.
        example:
            # TO-DO:
            # Descrption: a user-name checking feature needs to be finished here.
            # Issues: What is not qualified.

    2. comment line/paragraph starting with "''' xxx '''" is for function/procedure/class users, this is to comment docstring only.
        example:
            class SomeClass(object):
                '''
                    docstring of SomeClass here.
                '''
                def __init__(self, xx, yy):
                    '''docstring of class functions here'''

    3. DO NOT USE THE QUOTES '"' TO START A COMMENT PARAGRAPH.



Sample:
#
# PUT FILE HEADER PART HERE AT THE BEGINNING OF THIS FILE
#


import xxx
import yyy, zzz

from aaa import *
from bbb import xxx
from ccc import yyy as Y


GLOBAL_VAR_1 = None
GLOBAL_VAR_2 = 3.0
GLOBAL_VAR_3 = ['yes', 'no']


class TemplateClass(object)
    '''
    class docstring here.
    '''

    obj_attr1 = None
    obj_attr2 = 2
    ...

    def __init__(self, xx=default, yy):
        '''function docstring here'''
        _obj_attr3 = xx
        do_something_here
        return what

    @property
    def obj_attr(self):
        '''function docstring here'''
        return self._obj_attr3

    @obj_attr.setter
    def obj_atter(self, val):
        '''function docstring here'''
        if isinstance(val, str):
            self._obj_attr3 = val
        else:
            raise-some-error
        return what

    @classmethod
    def some_class_method(cls, xx, yy):
        '''function docstring here'''
        do_some_class_stuff_here
        return what

    @staticmethod
    def some_static_method(xx, yy):
        '''function docstring here'''
        do_some_static_stuff_here
        return what

# EOF Reached.
